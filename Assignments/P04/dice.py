################################
# Jon Scales
# Program 04
# CMPS2143

# This program will define 2 classes for a single die and multiple dice.  Methods in each class will allow the construction of rolls of the die/dice, writing out to the console a presentation of the die/dice rolls, determining sum of all die values with multiple rolss of the die or dice.  When multiple dice are used, the maximum face value obtained with each set of dice can be reported, also the minimum value or the average values can be reported. 
##################################

#################################
#large portions of this code were provided by Dr. Terry Griffin
#################################

from rich import print
import random
import sys


class Die(object):
  """
  This class creates a single, 6-sided die by default.  Any number of sides 
   can be input by the user in the constructor
  """

  def __init__(self, sides=None):
    """
    constructor method
    """
    
    if not sides:
      self.sides = 6
    else:
      if not isinstance(sides, int):
        print("error: sides is not an integer!")
        sys.exit()
      self.sides = sides

  """
  Methods
  """
  def roll(self):
    """

    """
    
    values = [x for x in range(self.sides)]
    random.shuffle(values)
    return values[0] + 1

  def __str__(self):
    return f"[sides: {self.sides}]"


class Dice:
  """
  This class creates a list holding multiple instances of die by default.  
  A single die is generated by default. any number of die can be       
  spedified as a param. All die in the list have the same number of sides. 
  6 sides is default, but any number of sides can be input by the user in 
  the constructor params
  """

  def __init__(self, sides=None, num_dice=1):
    """
    constructor method
    """
   
    if not sides: #defaults to 6 is side number is omitted
      self.sides = 6
    #check to ensure number of side is an integer
    else:
      if not isinstance(sides, int):
        print("error: sides is not an integer!")
        sys.exit()
      self.sides = sides

    # create lists to hold multiple instances of die, roll values, max values, min values, & 
    # avg values
    self.dice = []
    self.faceVals = []
    self.maxes =[]
    self.mins = []
    self.avgs = []
    
    # add die to list 
    for die in range(num_dice):
      self.dice.append(Die(sides))

  def sum(self):
    """
    rolls n, s-sided dice and appends all die values onto a list 'faceVals'
    the max value in the 'faceVals' list is then returned
    """
    rollSum = 0
    faceVals = []
    for d in self.dice:
      nv=d.roll()
      rollSum += nv
      faceVals.append(nv)
    print(self.printRoll(faceVals), end="sum = ")
    return rollSum

  def max(self):
    """
    rolls n, s-sided dice and appends all die values onto a list 'faceVals'
    the max value in the 'faceVals' list is then returned. The list of rolled values is also 
    printed
    """
    rollSum = 0
    faceVals = []
    for d in self.dice:
      rollSum += d.roll()
      faceVals.append(d.roll())
    print(self.printRoll(faceVals), end="max = ")
    self.maxes.append(max(faceVals))
    mx=max(faceVals)
    return mx

  def min(self):
    """
    rolls n, s-sided dice and appends all die values onto a list 'faceVals'
    the max value in the 'faceVals' list is then returned. The list of rolled values is also 
    printed
    """
    rollSum = 0
    faceVals = []
    for d in self.dice:
      rollSum += d.roll()
      faceVals.append(d.roll())
    print(self.printRoll(faceVals), end="min = ")
    self.mins.append(min(faceVals))
    mn=min(faceVals)
    return mn

  def avg(self):
    """
    rolls n, s-sided dice and appends all die values onto a list 'faceVals'
    the avg value in the 'faceVals' list is then returned. The list of rolled values is also 
    printed
    """
    faceVals = []
    for d in self.dice:
      x = d.roll()
      # print(type(x))
      faceVals.append(x)
    print(self.printRoll(faceVals), end="avg = ")
    avg=sum(faceVals) / len(faceVals)
    return avg

  def roll(self, rollType=None):
    """
    This method calls the necessary rolltype method. Differs from the simple roll method of 
    class Die to allow for determination of max, min, or avg of multiple dies rolled 
    simultaneously
    """
    if rollType == 'max':
      return self.max()
    elif rollType == 'min':
      return self.min()
    elif rollType == 'avg':
      return self.avg()
    else:
      return self.sum()

  def printRoll(self, faceVals):
    """
    This method creates a list of the rolled values to allow them to be printed to the console 
    for each roll of a multi-roll method (min, max, avg)
    """
    rollset=""
    rollset = rollset + "Dice values [ " 
    for v in faceVals:
      rollset = rollset + str(v) + " "
    rollset = rollset + "] "  
    return rollset
   
       
      
  
  def __str__(self):
    """
    This method "overloads" the string operator to print ouf the list of die objects in a Dice 
    class"
    """
    s = "Dice :[ "
    for d in self.dice:
      s = s + str(d)
    s = s + "]\n"
    return s


def dieRoller(die, numRolls=10, testType="sum"):
  """
  This method actually calls the proper roll method depending on the associated parameters of 
  the roll call.  Params are number of rolls, if the object is a single die or mulciple dice, & 
  what type of roll output information is desired ( max value, min value or avg value). 
  """

  # self.maxes=[]
  # self.mins=[]
  # self.avgs=[]
  if isinstance(die, Die):  # die is an instance of the Die class
    print(f"Testing {die.sides} sided die for {numRolls} rolls:")
    print("    [ ", end="")
    for i in range(numRolls):
      print(die.roll(), end=", ")
    print("]\n")
  elif testType != "sum":  # in this case die is an instance of the Dice class
    print(f"Rolling {len(die.dice)} {die.sides} sided die {numRolls} times to get the {testType} individual die value for each roll:")
    #print("end="")
    for i in range(numRolls):
      if testType == "avg":
        
        print(die.avg(), end="\n")
        # avgs.append(avg)
        # print(f"Averages: [ ", avgs, " ]\n")
      elif testType == "min":
        
        print(die.min(), end="\n ")
        # mins.append(mn)
        # print(f"Minimums: [ ", mins, " ]\n")
      elif testType == "max" :
       
        print(die.max(), end="\n ")
        #maxes.append(mx)
        #print(f"Maximums: [ ", maxes, " ]\n")
    print("\n")
  else:
    print(f"Rolling {len(die.dice)} {die.sides} sided die {numRolls} times to get the {testType} of all die values for each roll:")
    #print("    [ ", end="")
    for i in range(numRolls):
       print(die.sum(), end="\n")
    print("\n")


if __name__ == '__main__':
  d1 = Die()
  d2 = Die(20)
  d3 = Dice(10, 5)
  d4 = Dice(6,2)

  dieRoller(d1, 10)
  dieRoller(d2, 20)
  dieRoller(d3, 10, "max")
  dieRoller(d3, 10, "min")
  dieRoller(d3, 10, "avg")
  dieRoller(d4, 2)
